\begin{lstlisting}
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cstring>
using namespace std;

const int N = 255555;
const int C = 36;

struct Node {
	Node *next[C], *fail;
	int count, len, dp, dp2;
	void clear() {
		for(int i = 0; i < C; i++)
			next[i] = NULL;
		len = count = 0;
		fail = NULL;
	}
};

Node *tail, *q[N * 2], pool[N * 2], *head;
int used = 0, top = 0;
char bufer[N * 2];

Node *newNode() {
	pool[used++].clear();
	return &pool[used - 1];
}

void add(int x) {
	Node *np = newNode(), *p = tail;
	tail = np;
	np->len = p->len + 1;
	for(; p && !p->next[x]; p = p->fail)
		p->next[x] = np;
	if (!p)
		np->fail = head;
	else if (p->len + 1 == p->next[x]->len)
		np->fail = p->next[x];
	else {
		Node *q = p->next[x], *nq = newNode();
		*nq = *q; 
		nq->len = p->len + 1;
		q->fail = np->fail = nq;
		for(; p && p->next[x] == q; p = p->fail)
			p->next[x] = nq;
	}
}

int main() {
	scanf("%s", bufer);
	int length = strlen(bufer);
	head = tail = newNode();
	for(int i = 0; i < length; i++)
		add(bufer[i] - 'a');
	for(int i = 0; i < used; i++)
		pool[i].count = 0, pool[i].dp = pool[i].len;
	int number = 0;
	while(scanf("%s", bufer) == 1) {
		number++;
		length = strlen(bufer);
		Node *iter = head;
		int cur = 0;
		top = 0;
		for(int i = 0; i < length; i++) {
			int x = bufer[i] - 'a';
			while(iter != head && !iter->next[x])
				iter = iter->fail, cur = iter->len;
			if (iter->next[x]) {
				cur++;
				iter = iter->next[x];
			}
			q[top++] = iter; 
			if (iter->count == number - 1) {
				iter->count = number;
				iter->dp2 = cur;
			} else if (iter->count == number) {
				iter->dp2 = max(iter->dp2, cur);
			} else {
				top--;
			}
		}	
		for(int i = 0; i < top; i++) {
			q[i]->dp = min(q[i]->dp, q[i]->dp2);
		}
	}	
	int ans = 0;
	for(int i = 0; i < used; i++)
		if (pool[i].count == number)
			ans = max(ans, pool[i].dp);
	printf("%d\n", ans);
	return 0;
}
	\end{lstlisting}
