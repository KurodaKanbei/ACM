\begin{lstlisting}
#include<cstring>
#include<cstdio>
#include<algorithm>
using namespace std;
struct couple
{
	long long x, y;
	couple(){}
	couple(const long long  & _x, const long long &_y) {x = _x; y = _y;}
	void scan(){scanf("%lld%lld", &x, &y);}
	void print() {printf("%lld %lld\n", x, y);}
} q1[111111], *q, q2[111111], a[111111], x;
long long ans, ans1, s1[111111], s2[111111], *s;
int n, Q, cl1, cl2, cl, mid, lb, bs[2], frm, to;
couple operator + (const couple & a, const couple & b)
{return couple(a.x + b.x, a.y + b.y);}
couple operator - (const couple & a, const couple & b)
{return couple(a.x - b.x, a.y - b.y);}
long long operator * (const couple & a, const couple & b)
{return a.x * b.y - a.y * b.x;}
bool operator < (const couple & a, const couple & b)
{return a.x < b.x or a.x == b.x and a.y < b.y;}
typedef bool (* func) (const couple & a, const couple & b);
bool lss(const couple & a, const couple & b) {return a < b;}
bool grt(const couple & a, const couple & b) {return b < a;}
void psh(int i)
{
	while(cl > 1 and (a[i] - q[cl]) * (q[cl] - q[cl - 1]) <= 0) cl--;
	q[++cl] = a[i];
}
bool check(int mid)
{
	return (x - q[mid]) * (q[mid + 1] - x) < 0;
}
func cmp;
void calc()
{
	lb = lower_bound(q + 1, q + 1 + cl, x, cmp) - q;
	if(lb == cl + 1 or lb == 1 or (q[lb] - x) * (x - q[lb - 1]) > 0)
	{
		bs[0] = 1; bs[1] = lb - 1;
		while(bs[0] < bs[1] - 1)
		{
			mid = (bs[0] + bs[1]) / 2;
			bs[check(mid)] = mid;
		}
		frm = check(bs[0])?bs[0]:bs[1];
		bs[0] = lb - 1; bs[1] = cl - 1;
		while(bs[0] < bs[1] - 1)
		{
			mid = (bs[0] + bs[1]) / 2;
			bs[!check(mid)] = mid;
		}
		to = check(bs[1])?bs[1]:bs[0];
		if(!frm) ans1 += 0 * (x * q[1]);
		else if(to == cl) ans1 += 0 * (q[cl1] * x);
		else ans1 += q[frm] * x + x * q[to + 1] - s[to] + s[frm - 1];
	}
}
int main()
{
	scanf("%d%d", &n, &Q);
	for(int i = 1; i <= n; i++) a[i].scan();
	sort(a + 1, a + 1 + n);
	q = q1; s = s1;
	cl = 0;
	for(int i = 1; i <= n; i++)
	{
		psh(i);
	}
	s[0] = 0;
	for(int i = 1; i < cl; i++) s[i] = s[i - 1] + q[i] * q[i + 1];
	cl1 = cl;
	q = q2; s = s2;
	cl = 0;
	for(int i = n; i >= 1; i--)
	{
		psh(i);
	}
	s[0] = 0;
	for(int i = 1; i < cl; i++) s[i] = s[i - 1] + q[i] * q[i + 1];
	cl2 = cl;
	ans = s1[cl1 - 1] + s2[cl2 - 1];
	for(int i = 1; i <= Q; i++)
	{
		x.scan();
		ans1 = ans;
		cl = cl1; q = q1; s = s1; cmp = lss;
		calc();
		cl = cl2; q = q2; s = s2; cmp = grt;
		calc();
		ans1 = abs(ans1);
		printf("%lld.%c\n", ans1 / 2, ans1 % 2 == 1?'5':'0');
	}
	fclose(stdin);
	return 0;
}
\end{lstlisting}
